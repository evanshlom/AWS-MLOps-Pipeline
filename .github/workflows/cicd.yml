name: Deploy ML Model

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Image
        run: |
          docker build -t simple-ml .
          docker tag simple-ml:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/simple-ml:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/simple-ml:latest

      - name: Deploy to SageMaker
        run: |
          python -c "
          import boto3
          import json
          
          client = boto3.client('sagemaker')
          
          # Create model
          try:
              client.create_model(
                  ModelName='simple-ml-model',
                  PrimaryContainer={
                      'Image': '${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/simple-ml:latest',
                      'Mode': 'SingleModel'
                  },
                  ExecutionRoleArn='arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/SageMakerExecutionRole'
              )
              print('Model created')
          except Exception as e:
              print(f'Model exists or error: {e}')
          
          # Create endpoint config
          try:
              client.create_endpoint_configuration(
                  EndpointConfigName='simple-ml-config',
                  ProductionVariants=[{
                      'InstanceType': 'ml.t2.medium',
                      'InitialInstanceCount': 1,
                      'InitialVariantWeight': 1,
                      'ModelName': 'simple-ml-model',
                      'VariantName': 'primary'
                  }]
              )
              print('Endpoint config created')
          except Exception as e:
              print(f'Config exists or error: {e}')
          
          # Create/update endpoint
          try:
              client.create_endpoint(
                  EndpointName='simple-ml-endpoint',
                  EndpointConfigName='simple-ml-config'
              )
              print('Endpoint created')
          except:
              client.update_endpoint(
                  EndpointName='simple-ml-endpoint',
                  EndpointConfigName='simple-ml-config'
              )
              print('Endpoint updated')
          "