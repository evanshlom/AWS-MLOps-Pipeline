name: Deploy ML Model

on:
  push:
    branches: [ main, alt ]

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Configuration
        run: |
          echo "AWS Region: ${{ env.AWS_REGION }}"
          aws sts get-caller-identity
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and Push Image
        run: |
          docker build -t simple-ml .
          docker tag simple-ml:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/simple-ml:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/simple-ml:latest

      - name: Deploy to SageMaker
        run: |
          python -c "
          import boto3
          import json
          from datetime import datetime
          
          client = boto3.client('sagemaker')
          timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
          
          # Create model with timestamp
          model_name = f'simple-ml-model-{timestamp}'
          try:
              client.create_model(
                  ModelName=model_name,
                  PrimaryContainer={
                      'Image': '${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/simple-ml:latest',
                      'Mode': 'SingleModel'
                  },
                  ExecutionRoleArn='${{ secrets.SAGEMAKER_ROLE_ARN }}'
              )
              print(f'Model created: {model_name}')
          except Exception as e:
              print(f'Model creation error: {e}')
              exit(1)
          
          # Create endpoint config with timestamp
          config_name = f'simple-ml-config-{timestamp}'
          try:
              client.create_endpoint_config(
                  EndpointConfigName=config_name,
                  ProductionVariants=[{
                      'InstanceType': 'ml.t2.medium',
                      'InitialInstanceCount': 1,
                      'InitialVariantWeight': 1,
                      'ModelName': model_name,
                      'VariantName': 'primary'
                  }]
              )
              print(f'Endpoint config created: {config_name}')
          except Exception as e:
              print(f'Config creation error: {e}')
              exit(1)
          
          # Create or update endpoint
          endpoint_name = 'simple-ml-endpoint'
          try:
              # Try to describe endpoint first
              response = client.describe_endpoint(EndpointName=endpoint_name)
              # If it exists, update it
              client.update_endpoint(
                  EndpointName=endpoint_name,
                  EndpointConfigName=config_name
              )
              print(f'Endpoint updated with config: {config_name}')
          except client.exceptions.ClientError as e:
              if 'does not exist' in str(e):
                  # Create new endpoint
                  client.create_endpoint(
                      EndpointName=endpoint_name,
                      EndpointConfigName=config_name
                  )
                  print(f'Endpoint created: {endpoint_name}')
              else:
                  print(f'Endpoint error: {e}')
                  exit(1)
          "